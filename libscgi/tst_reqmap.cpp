#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

#include "libscgi.hpp"

#include <regex>

TEST_CASE( "minimal valid netstring", "[basic]" )
{
  std::vector<std::byte> in_data{3};
  const char *raw_data = "0:,";
  for( int i = 0; i < 3; ++i ) in_data[i] = static_cast<std::byte>( raw_data[i] );

  REQUIRE( in_data.size() == 3 );

  auto [header_size, start_size] = scgi::check_netstring( in_data.data() );
  REQUIRE( start_size == 2 );
  REQUIRE( header_size == 0 );
  REQUIRE( in_data[start_size + header_size] == static_cast<std::byte>( ',' ) ); // next 'char' should be a ','
  REQUIRE( ( start_size + header_size + 1u ) == in_data.size() );

  // use sgi::check_netstringi() check the ',' char too
  auto [xheader_size, xstart_size] = scgi::check_netstring( in_data.data(), false );
  REQUIRE( xstart_size == 2 );
  REQUIRE( xheader_size == 0 );

  // this should fail, cause this is not valid SCGI
  auto [yheader_size, ystart_size] = scgi::check_scgi( in_data.data(), false );
  REQUIRE( ystart_size == 0 );
  REQUIRE( yheader_size == 0 );
}

TEST_CASE( "minimal valid SCGI header", "[basic]" )
{
  // the value 28 is very sensetive to the string **WARNING**
  std::vector<std::byte> in_data{28};
  const char *raw_data = "24:CONTENT_LENGTH\0000\000SCGI\0001\000,";
  for( int i = 0; i < 28; ++i ) in_data[i] = static_cast<std::byte>( raw_data[i] );

  REQUIRE( in_data.size() == 28 );

  auto [header_size, start_size] = scgi::check_scgi( in_data.data() );
  REQUIRE( start_size == 3 );
  REQUIRE( header_size == 24 );
  REQUIRE( in_data[start_size + header_size] == static_cast<std::byte>( ',' ) ); // next 'char' should be a ','
  REQUIRE( ( start_size + header_size + 1u ) == in_data.size() );

  // use sgi::check_scgi() check the ',' char too
  auto [xheader_size, xstart_size] = scgi::check_scgi( in_data.data(), false );
  REQUIRE( xstart_size == 3 );
  REQUIRE( xheader_size == 24 );

  // use sgi::check_netstringi() to get same result
  auto [yheader_size, ystart_size] = scgi::check_netstring( in_data.data() );
  REQUIRE( ystart_size == 3 );
  REQUIRE( yheader_size == 24 );

  scgi::request_map rmap;
  auto read_size = rmap.parse_scgi_header( in_data.data() + start_size, header_size );
  REQUIRE( read_size == header_size );

  REQUIRE( rmap.size() == 2 );
  REQUIRE( rmap.at( "SCGI" ) == "1" );
  REQUIRE( rmap.at( "CONTENT_LENGTH" ) == "0" );
}

TEST_CASE( "example apache2 SCGI header", "[basic]" )
{
  std::vector<std::byte> in_data{766};
  const unsigned char raw_data[] = {0x37, 0x36, 0x31, 0x3a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47,
      0x54, 0x48, 0x00, 0x30, 0x00, 0x53, 0x43, 0x47, 0x49, 0x00, 0x31, 0x00, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x73, 0x63, 0x67,
      0x69, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x66, 0x6f, 0x00, 0x31, 0x00, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x48, 0x4f, 0x53,
      0x54, 0x00, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x35, 0x36, 0x2e, 0x31, 0x36, 0x3a, 0x38, 0x30, 0x31, 0x30, 0x00,
      0x48, 0x54, 0x54, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x00, 0x63, 0x75, 0x72, 0x6c, 0x2f,
      0x37, 0x2e, 0x36, 0x35, 0x2e, 0x30, 0x00, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x00, 0x2a, 0x2f,
      0x2a, 0x00, 0x50, 0x41, 0x54, 0x48, 0x00, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2f, 0x73, 0x62, 0x69,
      0x6e, 0x3a, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2f, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x75, 0x73, 0x72,
      0x2f, 0x73, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0x3a,
      0x2f, 0x62, 0x69, 0x6e, 0x00, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
      0x00, 0x3c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3e, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x32, 0x2e, 0x34, 0x2e,
      0x33, 0x38, 0x20, 0x28, 0x44, 0x65, 0x62, 0x69, 0x61, 0x6e, 0x29, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x61, 0x74,
      0x20, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x35, 0x36, 0x2e, 0x31, 0x36, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x38,
      0x30, 0x31, 0x30, 0x3c, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3e, 0x0a, 0x00, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
      0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x00, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x32, 0x2e, 0x34, 0x2e,
      0x33, 0x38, 0x20, 0x28, 0x44, 0x65, 0x62, 0x69, 0x61, 0x6e, 0x29, 0x00, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x41,
      0x4d, 0x45, 0x00, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x35, 0x36, 0x2e, 0x31, 0x36, 0x00, 0x53, 0x45, 0x52, 0x56,
      0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x00, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x35, 0x36, 0x2e, 0x31, 0x36,
      0x00, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x00, 0x38, 0x30, 0x31, 0x30, 0x00, 0x52, 0x45, 0x4d,
      0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x00, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x35, 0x36, 0x2e, 0x31,
      0x00, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x00, 0x2f, 0x76, 0x61, 0x72, 0x2f, 0x77,
      0x77, 0x77, 0x2f, 0x6a, 0x70, 0x79, 0x77, 0x70, 0x2d, 0x74, 0x73, 0x74, 0x00, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
      0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x00, 0x68, 0x74, 0x74, 0x70, 0x00, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x50,
      0x52, 0x45, 0x46, 0x49, 0x58, 0x00, 0x00, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45,
      0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x00, 0x2f, 0x76, 0x61, 0x72, 0x2f, 0x77, 0x77, 0x77, 0x2f, 0x6a, 0x70, 0x79, 0x77,
      0x70, 0x2d, 0x74, 0x73, 0x74, 0x00, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x00, 0x77, 0x65,
      0x62, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x40, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x00, 0x53, 0x43, 0x52,
      0x49, 0x50, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x00, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x3a, 0x73, 0x63,
      0x67, 0x69, 0x3a, 0x2f, 0x2f, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x38, 0x30, 0x30, 0x30, 0x2f, 0x00,
      0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x00, 0x33, 0x37, 0x39, 0x34, 0x34, 0x00, 0x53, 0x45, 0x52,
      0x56, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x00, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31,
      0x00, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x00, 0x47, 0x45, 0x54, 0x00, 0x51,
      0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x00, 0x00, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
      0x55, 0x52, 0x49, 0x00, 0x2f, 0x00, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x00, 0x00, 0x50, 0x41,
      0x54, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x00, 0x2f, 0x00, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c,
      0x41, 0x54, 0x45, 0x44, 0x00, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x3a, 0x73, 0x63, 0x67, 0x69, 0x3a, 0x2f, 0x2f, 0x31, 0x32, 0x37,
      0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x38, 0x30, 0x30, 0x30, 0x2f, 0x2f, 0x00, 0x2c};
  for( int i = 0; i < 766; ++i ) in_data[i] = static_cast<std::byte>( raw_data[i] );

  REQUIRE( in_data.size() == 766 );

  auto [header_size, start_size] = scgi::check_scgi( in_data.data() );
  REQUIRE( start_size == 4 );
  REQUIRE( header_size == 761 );
  REQUIRE( in_data[start_size + header_size] == static_cast<std::byte>( ',' ) ); // next 'char' should be a ','
  REQUIRE( ( start_size + header_size + 1u ) == in_data.size() );

  // use sgi::check_scgi() check the ',' char too
  auto [xheader_size, xstart_size] = scgi::check_scgi( in_data.data(), false );
  REQUIRE( xstart_size == 4 );
  REQUIRE( xheader_size == 761 );

  // use sgi::check_netstringi() to get same result
  auto [yheader_size, ystart_size] = scgi::check_netstring( in_data.data() );
  REQUIRE( ystart_size == 4 );
  REQUIRE( yheader_size == 761 );

  scgi::request_map rmap;
  auto read_size = rmap.parse_scgi_header( in_data.data() + start_size, header_size );
  REQUIRE( read_size == header_size );

  REQUIRE( rmap.size() == 27 );
  REQUIRE( rmap.at( "SCGI" ) == "1" );
  REQUIRE( rmap.at( "CONTENT_LENGTH" ) == "0" );
  REQUIRE( rmap.at( "SERVER_PROTOCOL" ) == "HTTP/1.1" );
  REQUIRE( rmap.at( "REQUEST_METHOD" ) == "GET" );
  REQUIRE( rmap.at( "REQUEST_SCHEME" ) == "http" );
  REQUIRE( rmap.at( "REQUEST_URI" ) == "/" );
  REQUIRE( rmap.at( "PATH_INFO" ) == "/" );
}
